/*************************************************************************

bq Cervantes e-book reader application
Copyright (C) 2011-2016  Mundoreader, S.L

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the source code.  If not, see <http://www.gnu.org/licenses/>.

*************************************************************************/

/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -p SyncHelper -c SyncHelper -N ../../syncHelper/SyncHelperService.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SYNCHELPER_H_1376486058
#define SYNCHELPER_H_1376486058

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.bq.SyncHelperService
 */
class SyncHelper: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.bq.SyncHelperService"; }

public:
    SyncHelper(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~SyncHelper();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AbortSync()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("AbortSync"), argumentList);
    }

    inline QDBusPendingReply<> Cancel()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Cancel"), argumentList);
    }

    inline QDBusPendingReply<int> GetBooksSynchronized()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetBooksSynchronized"), argumentList);
    }

    inline QDBusPendingReply<int> GetBooksToSync()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetBooksToSync"), argumentList);
    }

    inline QDBusPendingReply<qlonglong> GetServerTimestamp()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServerTimestamp"), argumentList);
    }

    inline QDBusPendingReply<bool> IsSynchronizing()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsSynchronizing"), argumentList);
    }

    inline QDBusPendingReply<> SetServerTimestamp(qlonglong serverTimestamp)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serverTimestamp);
        return asyncCallWithArgumentList(QLatin1String("SetServerTimestamp"), argumentList);
    }

    inline QDBusPendingReply<> Start(bool lazyDelete, bool premium)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(lazyDelete) << QVariant::fromValue(premium);
        return asyncCallWithArgumentList(QLatin1String("Start"), argumentList);
    }

    inline QDBusPendingReply<> archiveBook(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QLatin1String("archiveBook"), argumentList);
    }

    inline QDBusPendingReply<> getHomeBooks()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getHomeBooks"), argumentList);
    }

    inline QDBusPendingReply<int> getSyncProgress()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getSyncProgress"), argumentList);
    }

    inline QDBusPendingReply<> init(const QString &privatePartition, const QString &serialNumber, const QString &dataPartition, const QString &servicesUrl, const QString &shopName, const QString &deviceModel, const QString &version, const QString &lang)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(privatePartition) << QVariant::fromValue(serialNumber) << QVariant::fromValue(dataPartition) << QVariant::fromValue(servicesUrl) << QVariant::fromValue(shopName) << QVariant::fromValue(deviceModel) << QVariant::fromValue(version) << QVariant::fromValue(lang);
        return asyncCallWithArgumentList(QLatin1String("init"), argumentList);
    }

    inline QDBusPendingReply<> removeBook(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QLatin1String("removeBook"), argumentList);
    }

    inline QDBusPendingReply<> sendTransactions()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("sendTransactions"), argumentList);
    }

    inline QDBusPendingReply<> unArchiveBook(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QLatin1String("unArchiveBook"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AddBook(const QVariantMap &data, const QVariantMap &locations);
    void AddHomeBook(const QVariantMap &data, int type, int id, const QString &name);
    void Finished(int status, bool dirtyLibrary);
    void ProgressChanged(int value);
    void RemoveBook(const QString &path);
    void UpdateBook(const QVariantMap &data, const QVariantMap &locations);
    void getHomeBooksFinished();
    void homeBooksFinished();
    void unArchivedBook(int status, bool dirtyLibrary);
};

#endif
