/*************************************************************************

bq Cervantes e-book reader application
Copyright (C) 2011-2016  Mundoreader, S.L

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the source code.  If not, see <http://www.gnu.org/licenses/>.

*************************************************************************/

/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -p Manager -c Manager -N manager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MANAGER_H_1339522660
#define MANAGER_H_1339522660

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "TechnologiesList.h"

/*
 * Proxy class for interface net.connman.Manager
 */
class Manager: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "net.connman.Manager"; }

public:
    Manager(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~Manager();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> ConnectProvider(const QVariantMap &provider)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(provider);
        return asyncCallWithArgumentList(QLatin1String("ConnectProvider"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateSession(const QVariantMap &settings, const QDBusObjectPath &notifier)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(settings) << qVariantFromValue(notifier);
        return asyncCallWithArgumentList(QLatin1String("CreateSession"), argumentList);
    }

    inline QDBusPendingReply<> DestroySession(const QDBusObjectPath &session)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(session);
        return asyncCallWithArgumentList(QLatin1String("DestroySession"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetProperties"), argumentList);
    }

    inline QDBusPendingReply<TechnologiesList> GetServices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServices"), argumentList);
    }

    inline QDBusPendingReply<TechnologiesList> GetTechnologies()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetTechnologies"), argumentList);
    }

    inline QDBusPendingReply<> RegisterAgent(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path);
        return asyncCallWithArgumentList(QLatin1String("RegisterAgent"), argumentList);
    }

    inline QDBusPendingReply<> RegisterCounter(const QDBusObjectPath &path, uint accuracy, uint period)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path) << qVariantFromValue(accuracy) << qVariantFromValue(period);
        return asyncCallWithArgumentList(QLatin1String("RegisterCounter"), argumentList);
    }

    inline QDBusPendingReply<> ReleasePrivateNetwork(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path);
        return asyncCallWithArgumentList(QLatin1String("ReleasePrivateNetwork"), argumentList);
    }

    inline QDBusPendingReply<> RemoveProvider(const QDBusObjectPath &provider)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(provider);
        return asyncCallWithArgumentList(QLatin1String("RemoveProvider"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath, QVariantMap, QString> RequestPrivateNetwork()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RequestPrivateNetwork"), argumentList);
    }
    inline QDBusReply<QDBusObjectPath> RequestPrivateNetwork(QVariantMap &settings, QString &socket)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("RequestPrivateNetwork"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            settings = qdbus_cast<QVariantMap>(reply.arguments().at(1));
            socket = qdbus_cast<QString>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<> SetProperty(const QString &name, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(value);
        return asyncCallWithArgumentList(QLatin1String("SetProperty"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterAgent(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path);
        return asyncCallWithArgumentList(QLatin1String("UnregisterAgent"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterCounter(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path);
        return asyncCallWithArgumentList(QLatin1String("UnregisterCounter"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertyChanged(const QString &name, const QDBusVariant &value);
    void ServicesChanged(TechnologiesList changed, const QList<QDBusObjectPath> &removed);
    void TechnologyAdded(const QDBusObjectPath &path, const QVariantMap &properties);
    void TechnologyRemoved(const QDBusObjectPath &path);
};

#endif
